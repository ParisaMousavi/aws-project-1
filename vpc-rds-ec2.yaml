Description: >-
  AWS Project 1 - Creaet two VPC in Primary and Secondary region. 
  Create subnet group for RDS in both region. 
  Create a master db in primary region. 
  create a read replica in standby region.
Mappings:
  RegionVpcName:
    "eu-central-1":
      VpcName: "primary"
    "eu-west-3":
      VpcName: "Secondary"
  RegionVpcCIDR:
    "eu-central-1":
      VpcCIDR: 10.1.0.0/16
    "eu-west-3":
      VpcCIDR: 10.2.0.0/16
  RegionSubnetCIDR:
    "eu-central-1":
      SubnetCIDR: 10.1.20.0/24
    "eu-west-3":
      SubnetCIDR: 10.2.20.0/24
  RegionSubnetCIDR2:
    "eu-central-1":
      SubnetCIDR2: 10.1.40.0/24
    "eu-west-3":
      SubnetCIDR2: 10.2.40.0/24
  RegionPublicSubnetCIDR:
    "eu-central-1":
      SubnetCIDR3: 10.1.60.0/24
    "eu-west-3":
      SubnetCIDR3: 10.2.60.0/24
Conditions:
  CreateMasterDB: !Equals [ !Ref 'AWS::Region' , eu-central-1 ]
  CreateReadReplicaDB: !Equals [ !Ref 'AWS::Region' , eu-west-3 ]
Resources:
#--------------------------------
# Create VPC
#--------------------------------
  VPC1:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !FindInMap [ RegionVpcCIDR, !Ref "AWS::Region" , VpcCIDR ]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ]

#--------------------------------
# Create InternetGateway
#--------------------------------
  InternetGateway1:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ]

#--------------------------------
# Attach InternetGateway to VPC
#--------------------------------
  InternetGatewayAttachment1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway1
      VpcId: !Ref VPC1

#--------------------------------
# Create Subnet1 for VPC (multi-az)
#--------------------------------
  VpcSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !FindInMap [ RegionSubnetCIDR, !Ref "AWS::Region", SubnetCIDR ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 
            - ${VPCN1} Private Subnet (${AZ1})
            - VPCN1: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ] 
              AZ1: !Select [ 0, !GetAZs  '' ]


#--------------------------------
# Create Subnet2 for VPC (multi-az)
#--------------------------------
  VpcSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !FindInMap [ RegionSubnetCIDR2, !Ref "AWS::Region", SubnetCIDR2 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 
            - ${VPCN2} Private Subnet (${AZ2})
            - VPCN2: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ] 
              AZ2: !Select [ 1, !GetAZs  '' ] 

#--------------------------------
# Create Subnet (public) for VPC (multi-az)
#--------------------------------
  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: !FindInMap [ RegionPublicSubnetCIDR, !Ref "AWS::Region", SubnetCIDR3 ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 
            - ${VPCN3} Public Subnet (${AZ3})
            - VPCN3: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ] 
              AZ3: !Select [ 1, !GetAZs  '' ] 


#--------------------------------
# Create RouteTable for VPC
#--------------------------------
  VpcRouteTable1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub 
            - ${RVPCN} Public Routes
            - RVPCN: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ]

#--------------------------------
# Add Route (for internet) to RouteTable & specify the InternetGateway
#--------------------------------
  VpcIntternetRoute1:
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment1
    Properties:
      RouteTableId: !Ref VpcRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway1
  
#--------------------------------
# Assign RouteTable to PublicSubnet
#--------------------------------
  SubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref VpcRouteTable1
      SubnetId: !Ref PublicSubnet


#--------------------------------
# Create VPC Application Security Group
#--------------------------------
  ApplicationSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Udacity ARR Project - Application Security Group
      GroupName: UDARR-Application
      SecurityGroupIngress:
        -   Description: SSH from the Internet
            FromPort: 22
            IpProtocol: tcp
            CidrIp: 0.0.0.0/0
            ToPort: 22
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub
            - UDARR-Application-${APPSECURITYNAME}
            - APPSECURITYNAME: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ]

#--------------------------------
# Create VPC Database Security Group
#--------------------------------
  DatabaseSecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Udacity ARR Project - Database Security Group
      GroupName: UDARR-Database
      SecurityGroupIngress:
        -   Description: Application EC2 instances
            FromPort: 3306
            IpProtocol: tcp
            SourceSecurityGroupId: !Ref ApplicationSecurityGroup1
            ToPort: 3306
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub
            - UDARR-Database-${DBSECURITYNAME}
            - DBSECURITYNAME: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ]

#--------------------------------
# Create RDS Subnet Groups
#--------------------------------
  rdsDBSubnetGroup1:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - rds-multi-az-${SGVPCDES}
        - SGVPCDES: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ]
      DBSubnetGroupName: !Sub
        - rds-multi-az-${SGVPCN}
        - SGVPCN: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ]
      SubnetIds:
        - !Ref VpcSubnet1
        - !Ref VpcSubnet2

#--------------------------------
# Create Master DB in primary/active region   
#--------------------------------
  MasterDB:
    Type: AWS::RDS::DBInstance
    Condition: CreateMasterDB
    DependsOn: rdsDBSubnetGroup1
    DeletionPolicy: Retain
    Properties: 
      AllocatedStorage: 5
      DBName: "udacity"
      Engine: MySQL
      MasterUsername: awsuser
      MasterUserPassword: pass.123
      DBInstanceClass: db.t2.micro
      MultiAZ: true
      VPCSecurityGroups: 
        - !GetAtt DatabaseSecurityGroup1.GroupId
      DBSubnetGroupName: !Sub
        - rds-multi-az-${RDSSGVPCN}
        - RDSSGVPCN: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ]
      DeleteAutomatedBackups: true
      Tags:
        - Key: Name
          Value: "udacity"


#--------------------------------
# Create NIC for EC2
#--------------------------------
  NIC:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet
      Description: Interface for controlling traffic such as SSH
      GroupSet: 
      - !Ref ApplicationSecurityGroup1
      SourceDestCheck: true
      Tags:
        -
          Key: Network
          Value: Web
#--------------------------------
# Create EC2
#--------------------------------
  EC21:
    Type: AWS::EC2::Instance
    Condition: CreateMasterDB
    Properties: 
      KeyName: "udacity-project-1"
      InstanceType: t2.micro
      ImageId: ami-08c148bb835696b45
      NetworkInterfaces:
        -
          NetworkInterfaceId: !Ref NIC
          DeviceIndex: 0

Outputs:
  VPC:
    Description: Primary VPC ID
    Value: !FindInMap [ RegionVpcName, !Ref "AWS::Region" , VpcName ]
  Subnet:
    Description: Primary VPC Subnet ID
    Value: !Join [ ", ",[!Ref VpcSubnet1, !Ref VpcSubnet2]]
  # MasterDB:
  #   Condition: CreateMasterDB
  #   Description: RDS Master DB
  #   Value: !Ref MasterDB
  #   Export: 
  #     Name: MasterDB
  # ReplicaDB:
  #   Condition: CreateMasterDB
  #   Description: RDS Read Replica DB
  #   Value: !Ref ReplicaDB
